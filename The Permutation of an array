// Link: https://www.hackerrank.com/contests/23-jun-jul-ccc-vu-consolidate-ph-123-coding-practice/challenges/amazon-18

/* Problem :- 

A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].

Similarly, the next permutation of arr = [2,3,1] is [3,1,2].

While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.

Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.

Input Format

The First line contains an integer N denoting the size of array A.
The second line denotes N integers denoting the elements of array A.
Constraints

1 <= nums.length <= 10000
0 <= nums[i] <= 1000
Output Format

Print the array of integers which is the next permutation of the given array

Sample Input 0

6
352 520 9 356 692 171
Sample Output 0

352 520 9 692 171 356 
Sample Input 1

6
218 30 183 660 68 503
Sample Output 1

218 30 183 660 503 68 
*/


// *********************************************** Solution Here ************************

import java.io.*;
import java.util.*;

public class Solution {
    public static void nextPermutation(int[] a) {
        int i = a.length - 2, j = a.length - 1;

        while (i >= 0) {
            if (a[i] < a[i+1]) {
                break;
            } else {
                --i;
            }
        }

        if (i == -1) {
            for(i = 0; i < a.length / 2; ++i) {
                int temp = a[i];
                a[i] = a[a.length - i - 1];
                a[a.length - i - 1] = temp;
            }
        } else {
            
            while (j >= 0) {
                if (a[j] > a[i]) {
                    break;
                } else {
                    --j;
                }
            }

            int temp = a[i];
            a[i] = a[j];
            a[j] = temp;

            int shift = i + 1;

            for(int k = 0; k < (a.length - shift) / 2; ++k) {
                temp = a[shift + k];
                a[shift + k] = a[a.length - k - 1];
                a[a.length - k - 1] = temp;
            }
        }

    }

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
         Scanner sc=new Scanner(System.in);
        int m=sc.nextInt();
        
        int arr[]=new int[m];
       
        for(int i=0;i<m;i++)
        {
            arr[i]=sc.nextInt();
        }
        nextPermutation(arr);
           for(int i=0;i<m;i++)
        {
             System.out.print(arr[i]+" ");//=sc.nextInt();
        } 
      
        
    }
}

